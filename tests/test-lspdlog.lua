local llog = require("lspdlog")

return require('lib/tap')(function (test)
    test("stdout_mt test", function (print, p, expect, uv)
        local logger = llog.create("test")
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:set_level("debug")
        logger:trace("stdout_mt test")
        logger:debug("stdout_mt test")
        logger:info("stdout_mt test")
        logger:warn("stdout_mt test")
        logger:error("stdout_mt test")
        logger:critical("stdout_mt test")
    end)
    test("stdout_st test", function (print, p, expect, uv)
        local logger = llog.create("test", "stdout_st")
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:set_level("debug")
        logger:trace("stdout_st test")
        logger:debug("stdout_st test")
        logger:info("stdout_st test")
        logger:warn("stdout_st test")
        logger:error("stdout_st test")
        logger:critical("stdout_st test")
    end)
    test("basic_mt test", function (print, p, expect, uv)
        local logger = llog.create("test", "basic_mt", "build/basic_mt.log")
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        logger:trace("basic_mt test")
        logger:debug("basic_mt test")
        logger:info("basic_mt test")
        logger:warn("basic_mt test")
        logger:error("basic_mt test")
        logger:critical("basic_mt test")
        logger:flush()
    end)
    test("basic_st test", function (print, p, expect, uv)
        local logger = llog.create("test", "basic_st", "build/basic_st.log")
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        logger:trace("basic_st test")
        logger:debug("basic_st test")
        logger:info("basic_st test")
        logger:warn("basic_st test")
        logger:error("basic_st test")
        logger:critical("basic_st test")
        logger:flush()
    end)
    test("basic_st test truncate", function (print, p, expect, uv)
        local logger = llog.create("test", "basic_st", "build/basic_st.log", true)
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        logger:trace("basic_st test truncate")
        logger:debug("basic_st test truncate")
        logger:info("basic_st test truncate")
        logger:warn("basic_st test truncate")
        logger:error("basic_st test truncate")
        logger:critical("basic_st test truncate")
        logger:flush()
    end)
    test("rotating_mt test", function (print, p, expect, uv)
        local logger = llog.create("test", "rotating_mt", "build/rotating_mt.log", 500, 2)
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        for i = 1, 100 do
            logger:trace("rotating_mt test")
            logger:debug("rotating_mt test")
            logger:info("rotating_mt test")
            logger:warn("rotating_mt test")
            logger:error("rotating_mt test")
            logger:critical("rotating_mt test")
        end
        logger:flush()
    end)
    test("rotating_st test", function (print, p, expect, uv)
        local logger = llog.create("test", "rotating_st", "build/rotating_st.log", 500, 2)
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        for i = 1, 100 do
            logger:trace("rotating_st test")
            logger:debug("rotating_st test")
            logger:info("rotating_st test")
            logger:warn("rotating_st test")
            logger:error("rotating_st test")
            logger:critical("rotating_st test")
        end
        logger:flush()
    end)
    test("daily_mt test", function (print, p, expect, uv)
        local logger = llog.create("test", "daily_mt", "build/daily_mt.log")
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        logger:trace("daily_mt test")
        logger:debug("daily_mt test")
        logger:info("daily_mt test")
        logger:warn("daily_mt test")
        logger:error("daily_mt test")
        logger:critical("daily_mt test")
        logger:flush()
    end)
    test("daily_st test", function (print, p, expect, uv)
        local logger = llog.create("test", "daily_st", "build/daily_st.log")
        --logger:set_pattern("[%l][%T %D][%t]%v")
        logger:flush_on("error")
        logger:trace("daily_st test")
        logger:debug("daily_st test")
        logger:info("daily_st test")
        logger:warn("daily_st test")
        logger:error("daily_st test")
        logger:critical("daily_st test")
        logger:flush()
    end)
end)